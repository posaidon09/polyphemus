"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.YandexTranslator = void 0;

var _queryString = require("query-string");

var _lodash = require("lodash");

var _BaseTranslator = require("../../util/BaseTranslator");

var _fetchResponseToJson = require("../../lib/fetchResponseToJson");

var _getYandexSID = require("./getYandexSID");

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var __values = void 0 && (void 0).__values || function (o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

var YandexTranslator =
/** @class */
function (_super) {
  __extends(YandexTranslator, _super);

  function YandexTranslator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  YandexTranslator.isSupportedAutoFrom = function () {
    return true;
  };

  YandexTranslator.getSupportedLanguages = function () {
    // Supported, but not valid languages ['mhr', 'pap', 'ceb', 'mrj', 'udm']
    // eslint-disable
    // prettier-ignore
    return ['az', 'ml', 'sq', 'mt', 'am', 'mk', 'en', 'mi', 'ar', 'mr', 'hy', 'af', 'mn', 'eu', 'de', 'ba', 'ne', 'be', 'no', 'bn', 'pa', 'my', 'bg', 'fa', 'bs', 'pl', 'cy', 'pt', 'hu', 'ro', 'vi', 'ru', 'ht', 'gl', 'sr', 'nl', 'si', 'sk', 'el', 'sl', 'ka', 'sw', 'gu', 'su', 'da', 'tg', 'he', 'th', 'yi', 'tl', 'id', 'ta', 'ga', 'tt', 'it', 'te', 'is', 'tr', 'es', 'kk', 'uz', 'kn', 'uk', 'ca', 'ur', 'ky', 'fi', 'zh', 'fr', 'ko', 'hi', 'xh', 'hr', 'km', 'cs', 'lo', 'sv', 'la', 'gd', 'lv', 'et', 'lt', 'eo', 'lb', 'jv', 'mg', 'ja', 'ms']; // eslint-enable
  };

  YandexTranslator.prototype.getLengthLimit = function () {
    return 4000;
  };

  YandexTranslator.prototype.getRequestsTimeout = function () {
    return 500;
  };

  YandexTranslator.prototype.checkLimitExceeding = function (text) {
    if (Array.isArray(text)) {
      var arrayLen = text.reduce(function (acc, text) {
        return acc + text.length;
      }, 0);
      var extra = arrayLen - this.getLengthLimit();
      return extra > 0 ? extra : 0;
    } else {
      var extra = text.length - this.getLengthLimit();
      return extra > 0 ? extra : 0;
    }
  };

  YandexTranslator.prototype.translate = function (text, from, to) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        return [2
        /*return*/
        , this.translateBatch([text], from, to).then(function (resp) {
          return resp[0];
        })];
      });
    });
  };

  YandexTranslator.prototype.translateBatch = function (text, from, to) {
    return __awaiter(this, void 0, void 0, function () {
      var sid, options, body, text_1, text_1_1, textChunk, urlWithSid;

      var e_1, _a;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            return [4
            /*yield*/
            , (0, _getYandexSID.getYandexSID)()];

          case 1:
            sid = _b.sent();

            if (sid === null) {
              throw new Error('Invalid SID');
            }

            options = {
              format: 'html',
              lang: from === 'auto' ? to : "".concat(from, "-").concat(to)
            };
            body = (0, _queryString.stringify)(options);

            try {
              for (text_1 = __values(text), text_1_1 = text_1.next(); !text_1_1.done; text_1_1 = text_1.next()) {
                textChunk = text_1_1.value;
                body += '&text=' + encodeURIComponent(textChunk);
              }
            } catch (e_1_1) {
              e_1 = {
                error: e_1_1
              };
            } finally {
              try {
                if (text_1_1 && !text_1_1.done && (_a = text_1.return)) _a.call(text_1);
              } finally {
                if (e_1) throw e_1.error;
              }
            }

            urlWithSid = 'https://translate.yandex.net/api/v1/tr.json/translate?srv=tr-url-widget&id=' + sid + '-0-0&';
            return [2
            /*return*/
            , fetch(this.wrapUrlToCorsProxy(urlWithSid + body), {
              method: 'GET',
              credentials: 'omit',
              referrerPolicy: 'no-referrer',
              headers: __assign({
                'Content-Type': 'application/x-www-form-urlencoded'
              }, this.options.headers)
            }).then(_fetchResponseToJson.fetchResponseToJson).then(function (resp) {
              if (!(resp instanceof Object) || !Array.isArray(resp.text) || resp.text.length !== text.length) {
                throw new Error('Unexpected response');
              }

              return resp.text.map(function (text) {
                if (typeof text !== 'string') {
                  throw new Error('Unexpected response type');
                }

                return (0, _lodash.unescape)(text);
              });
            })];
        }
      });
    });
  };

  YandexTranslator.translatorName = 'YandexTranslator';
  return YandexTranslator;
}(_BaseTranslator.BaseTranslator);

exports.YandexTranslator = YandexTranslator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
