"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeTranslator = exports.ErrorFakeTranslator = void 0;

var _BaseTranslator = require("../util/BaseTranslator");

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

/**
 * Fake translator for use in tests and debug
 */
var FakeTranslator =
/** @class */
function (_super) {
  __extends(FakeTranslator, _super);

  function FakeTranslator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  FakeTranslator.isSupportedAutoFrom = function () {
    return false;
  };

  FakeTranslator.getSupportedLanguages = function () {
    return ['ru', 'en', 'de', 'ja'];
  };

  FakeTranslator.prototype.getLengthLimit = function () {
    return 3000;
  };

  FakeTranslator.prototype.getRequestsTimeout = function () {
    return 10;
  };

  FakeTranslator.prototype.checkDirection = function (from, to) {
    return from == 'ru' && to == 'ja' ? false : true;
  };

  FakeTranslator.prototype.translate = function (text, from, to) {
    var delay = this.options.delay === undefined ? 0 : this.options.delay === 'random' ? Math.floor(Math.random() * 1000) : this.options.delay;
    return new Promise(function (resolve) {
      setTimeout(function () {
        return resolve("*[".concat(from, "-").concat(to, "]") + text);
      }, delay);
    });
  };

  FakeTranslator.prototype.translateBatch = function (text, from, to) {
    var _this = this;

    return Promise.all(text.map(function (i) {
      return _this.translate(i, from, to).catch(function () {
        return null;
      });
    }));
  };

  FakeTranslator.translatorName = 'FakeTranslator';
  return FakeTranslator;
}(_BaseTranslator.BaseTranslator);

exports.FakeTranslator = FakeTranslator;

/**
 * Fake translator which always throw error for use in tests and debug
 */
var ErrorFakeTranslator =
/** @class */
function (_super) {
  __extends(ErrorFakeTranslator, _super);

  function ErrorFakeTranslator() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ErrorFakeTranslator.prototype.translate = function (_text, _from, _to) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        throw new Error('Fake error for translate method');
      });
    });
  };

  ErrorFakeTranslator.prototype.translateBatch = function (_text, _from, _to) {
    return __awaiter(this, void 0, void 0, function () {
      return __generator(this, function (_a) {
        throw new Error('Fake error for translateBatch method');
      });
    });
  };

  ErrorFakeTranslator.translatorName = 'FakeTranslator';
  return ErrorFakeTranslator;
}(FakeTranslator);

exports.ErrorFakeTranslator = ErrorFakeTranslator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zbGF0b3JzL0Zha2VUcmFuc2xhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7O0FBRUc7QUFDSCxJQUFBLGNBQUE7QUFBQTtBQUFBLFVBQUEsTUFBQSxFQUFBO0FBQW9DLEVBQUEsU0FBQSxDQUFBLGNBQUEsRUFBQSxNQUFBLENBQUE7O0FBQXBDLFdBQUEsY0FBQSxHQUFBOztBQTBDQzs7QUFyQ2MsRUFBQSxjQUFBLENBQUEsbUJBQUEsR0FBZCxZQUFBO0FBQ0MsV0FBTyxLQUFQO0FBQ0EsR0FGYTs7QUFJQSxFQUFBLGNBQUEsQ0FBQSxxQkFBQSxHQUFkLFlBQUE7QUFDQyxXQUFPLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLENBQVA7QUFDQSxHQUZhOztBQUlQLEVBQUEsY0FBQSxDQUFBLFNBQUEsQ0FBQSxjQUFBLEdBQVAsWUFBQTtBQUNDLFdBQU8sSUFBUDtBQUNBLEdBRk07O0FBSUEsRUFBQSxjQUFBLENBQUEsU0FBQSxDQUFBLGtCQUFBLEdBQVAsWUFBQTtBQUNDLFdBQU8sRUFBUDtBQUNBLEdBRk07O0FBSUEsRUFBQSxjQUFBLENBQUEsU0FBQSxDQUFBLGNBQUEsR0FBUCxVQUFzQixJQUF0QixFQUE4QyxFQUE5QyxFQUEwRDtBQUN6RCxXQUFPLElBQUksSUFBSSxJQUFSLElBQWdCLEVBQUUsSUFBSSxJQUF0QixHQUE2QixLQUE3QixHQUFxQyxJQUE1QztBQUNBLEdBRk07O0FBSUEsRUFBQSxjQUFBLENBQUEsU0FBQSxDQUFBLFNBQUEsR0FBUCxVQUFpQixJQUFqQixFQUErQixJQUEvQixFQUF1RCxFQUF2RCxFQUFtRTtBQUNsRSxRQUFNLEtBQUssR0FDVixLQUFLLE9BQUwsQ0FBYSxLQUFiLEtBQXVCLFNBQXZCLEdBQ0csQ0FESCxHQUVHLEtBQUssT0FBTCxDQUFhLEtBQWIsS0FBdUIsUUFBdkIsR0FDQyxJQUFJLENBQUMsS0FBTCxDQUFXLElBQUksQ0FBQyxNQUFMLEtBQWdCLElBQTNCLENBREQsR0FFQyxLQUFLLE9BQUwsQ0FBYSxLQUxsQjtBQU1BLFdBQU8sSUFBSSxPQUFKLENBQW9CLFVBQUMsT0FBRCxFQUFRO0FBQ2xDLE1BQUEsVUFBVSxDQUFDLFlBQUE7QUFBTSxlQUFBLE9BQU8sQ0FBQyxLQUFBLE1BQUEsQ0FBSyxJQUFMLEVBQVMsR0FBVCxFQUFTLE1BQVQsQ0FBYSxFQUFiLEVBQWUsR0FBZixJQUFSLElBQU8sQ0FBUDtBQUFrQyxPQUF6QyxFQUEyQyxLQUEzQyxDQUFWO0FBQ0EsS0FGTSxDQUFQO0FBR0EsR0FWTTs7QUFZQSxFQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxHQUFQLFVBQXNCLElBQXRCLEVBQXNDLElBQXRDLEVBQThELEVBQTlELEVBQTBFO0FBQTFFLFFBQUEsS0FBQSxHQUFBLElBQUE7O0FBQ0MsV0FBTyxPQUFPLENBQUMsR0FBUixDQUNOLElBQUksQ0FBQyxHQUFMLENBQVMsVUFBQyxDQUFELEVBQUU7QUFBSyxhQUFBLEtBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixFQUFrQixJQUFsQixFQUF3QixFQUF4QixFQUE0QixLQUE1QixDQUFrQyxZQUFBO0FBQU0sZUFBQSxJQUFBO0FBQXhDLE9BQUEsQ0FBQTtBQUE2QyxLQUE3RCxDQURNLENBQVA7QUFHQSxHQUpNOztBQWxDZ0IsRUFBQSxjQUFBLENBQUEsY0FBQSxHQUFpQixnQkFBakI7QUF1Q3hCLFNBQUEsY0FBQTtBQUFDLENBMUNELENBQW9DLDhCQUFwQyxDQUFBOzs7O0FBNENBOztBQUVHO0FBQ0gsSUFBQSxtQkFBQTtBQUFBO0FBQUEsVUFBQSxNQUFBLEVBQUE7QUFBeUMsRUFBQSxTQUFBLENBQUEsbUJBQUEsRUFBQSxNQUFBLENBQUE7O0FBQXpDLFdBQUEsbUJBQUEsR0FBQTs7QUFrQkM7O0FBZmEsRUFBQSxtQkFBQSxDQUFBLFNBQUEsQ0FBQSxTQUFBLEdBQWIsVUFDQyxLQURELEVBRUMsS0FGRCxFQUdDLEdBSEQsRUFHYzs7O0FBRWIsY0FBTSxJQUFJLEtBQUosQ0FBVSxpQ0FBVixDQUFOOzs7QUFDQSxHQU5ZOztBQVFBLEVBQUEsbUJBQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxHQUFiLFVBQ0MsS0FERCxFQUVDLEtBRkQsRUFHQyxHQUhELEVBR2M7OztBQUViLGNBQU0sSUFBSSxLQUFKLENBQVUsc0NBQVYsQ0FBTjs7O0FBQ0EsR0FOWTs7QUFWVSxFQUFBLG1CQUFBLENBQUEsY0FBQSxHQUFpQixnQkFBakI7QUFpQnhCLFNBQUEsbUJBQUE7QUFBQyxDQWxCRCxDQUF5QyxjQUF6QyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbGFuZ0NvZGUsIGxhbmdDb2RlV2l0aEF1dG8gfSBmcm9tICcuLi90eXBlcy9UcmFuc2xhdG9yJztcbmltcG9ydCB7IEJhc2VUcmFuc2xhdG9yIH0gZnJvbSAnLi4vdXRpbC9CYXNlVHJhbnNsYXRvcic7XG5cbi8qKlxuICogRmFrZSB0cmFuc2xhdG9yIGZvciB1c2UgaW4gdGVzdHMgYW5kIGRlYnVnXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWtlVHJhbnNsYXRvciBleHRlbmRzIEJhc2VUcmFuc2xhdG9yPHtcblx0ZGVsYXk/OiBudW1iZXIgfCAncmFuZG9tJztcbn0+IHtcblx0cHVibGljIHN0YXRpYyByZWFkb25seSB0cmFuc2xhdG9yTmFtZSA9ICdGYWtlVHJhbnNsYXRvcic7XG5cblx0cHVibGljIHN0YXRpYyBpc1N1cHBvcnRlZEF1dG9Gcm9tKCkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgZ2V0U3VwcG9ydGVkTGFuZ3VhZ2VzKCk6IGxhbmdDb2RlW10ge1xuXHRcdHJldHVybiBbJ3J1JywgJ2VuJywgJ2RlJywgJ2phJ107XG5cdH1cblxuXHRwdWJsaWMgZ2V0TGVuZ3RoTGltaXQoKSB7XG5cdFx0cmV0dXJuIDMwMDA7XG5cdH1cblxuXHRwdWJsaWMgZ2V0UmVxdWVzdHNUaW1lb3V0KCkge1xuXHRcdHJldHVybiAxMDtcblx0fVxuXG5cdHB1YmxpYyBjaGVja0RpcmVjdGlvbihmcm9tOiBsYW5nQ29kZVdpdGhBdXRvLCB0bzogbGFuZ0NvZGUpIHtcblx0XHRyZXR1cm4gZnJvbSA9PSAncnUnICYmIHRvID09ICdqYScgPyBmYWxzZSA6IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgdHJhbnNsYXRlKHRleHQ6IHN0cmluZywgZnJvbTogbGFuZ0NvZGVXaXRoQXV0bywgdG86IGxhbmdDb2RlKSB7XG5cdFx0Y29uc3QgZGVsYXkgPVxuXHRcdFx0dGhpcy5vcHRpb25zLmRlbGF5ID09PSB1bmRlZmluZWRcblx0XHRcdFx0PyAwXG5cdFx0XHRcdDogdGhpcy5vcHRpb25zLmRlbGF5ID09PSAncmFuZG9tJ1xuXHRcdFx0XHRcdD8gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMClcblx0XHRcdFx0XHQ6IHRoaXMub3B0aW9ucy5kZWxheTtcblx0XHRyZXR1cm4gbmV3IFByb21pc2U8c3RyaW5nPigocmVzb2x2ZSkgPT4ge1xuXHRcdFx0c2V0VGltZW91dCgoKSA9PiByZXNvbHZlKGAqWyR7ZnJvbX0tJHt0b31dYCArIHRleHQpLCBkZWxheSk7XG5cdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgdHJhbnNsYXRlQmF0Y2godGV4dDogc3RyaW5nW10sIGZyb206IGxhbmdDb2RlV2l0aEF1dG8sIHRvOiBsYW5nQ29kZSkge1xuXHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdHRleHQubWFwKChpKSA9PiB0aGlzLnRyYW5zbGF0ZShpLCBmcm9tLCB0bykuY2F0Y2goKCkgPT4gbnVsbCkpLFxuXHRcdCk7XG5cdH1cbn1cblxuLyoqXG4gKiBGYWtlIHRyYW5zbGF0b3Igd2hpY2ggYWx3YXlzIHRocm93IGVycm9yIGZvciB1c2UgaW4gdGVzdHMgYW5kIGRlYnVnXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvckZha2VUcmFuc2xhdG9yIGV4dGVuZHMgRmFrZVRyYW5zbGF0b3Ige1xuXHRwdWJsaWMgc3RhdGljIHJlYWRvbmx5IHRyYW5zbGF0b3JOYW1lID0gJ0Zha2VUcmFuc2xhdG9yJztcblxuXHRwdWJsaWMgYXN5bmMgdHJhbnNsYXRlKFxuXHRcdF90ZXh0OiBzdHJpbmcsXG5cdFx0X2Zyb206IGxhbmdDb2RlV2l0aEF1dG8sXG5cdFx0X3RvOiBsYW5nQ29kZSxcblx0KTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Zha2UgZXJyb3IgZm9yIHRyYW5zbGF0ZSBtZXRob2QnKTtcblx0fVxuXG5cdHB1YmxpYyBhc3luYyB0cmFuc2xhdGVCYXRjaChcblx0XHRfdGV4dDogc3RyaW5nW10sXG5cdFx0X2Zyb206IGxhbmdDb2RlV2l0aEF1dG8sXG5cdFx0X3RvOiBsYW5nQ29kZSxcblx0KTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuXHRcdHRocm93IG5ldyBFcnJvcignRmFrZSBlcnJvciBmb3IgdHJhbnNsYXRlQmF0Y2ggbWV0aG9kJyk7XG5cdH1cbn1cbiJdLCJmaWxlIjoidHJhbnNsYXRvcnMvRmFrZVRyYW5zbGF0b3IuanMifQ==
