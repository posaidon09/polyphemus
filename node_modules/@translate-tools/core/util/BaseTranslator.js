"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseTranslator = void 0;

// TODO: remove it and provide utils to implement translators

/**
 * Basic abstract class for translator
 */
var BaseTranslator =
/** @class */
function () {
  function BaseTranslator(options) {
    var _this = this;

    this.options = {};
    /**
     * Util to wrap url to CORS proxy
     */

    this.wrapUrlToCorsProxy = function (url) {
      // Use as prefix
      if (typeof _this.options.corsProxy === 'string') {
        return _this.options.corsProxy + url;
      } // Run user defined transformation


      if (typeof _this.options.corsProxy === 'function') {
        return _this.options.corsProxy(url);
      }

      return url;
    };

    if (options !== undefined) {
      this.options = options;
    }
  }

  BaseTranslator.prototype.checkLimitExceeding = function (text) {
    var plainText = Array.isArray(text) ? text.join('') : text;
    var extra = plainText.length - this.getLengthLimit();
    return extra > 0 ? extra : 0;
  };

  BaseTranslator.translatorName = 'UnknownTranslator';

  BaseTranslator.isRequiredKey = function () {
    return false;
  };

  BaseTranslator.isSupportedAutoFrom = function () {
    return false;
  };

  BaseTranslator.getSupportedLanguages = function () {
    return [];
  };

  return BaseTranslator;
}();

exports.BaseTranslator = BaseTranslator;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvQmFzZVRyYW5zbGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQXNDQTs7QUFDQTs7QUFFRztBQUVILElBQUEsY0FBQTtBQUFBO0FBQUEsWUFBQTtBQWdCQyxXQUFBLGNBQUEsQ0FBWSxPQUFaLEVBQTJDO0FBQTNDLFFBQUEsS0FBQSxHQUFBLElBQUE7O0FBRG1CLFNBQUEsT0FBQSxHQUFpQyxFQUFqQztBQXlCbkI7O0FBRUc7O0FBQ08sU0FBQSxrQkFBQSxHQUFxQixVQUFDLEdBQUQsRUFBWTtBQUMxQztBQUNBLFVBQUksT0FBTyxLQUFJLENBQUMsT0FBTCxDQUFhLFNBQXBCLEtBQWtDLFFBQXRDLEVBQWdEO0FBQy9DLGVBQU8sS0FBSSxDQUFDLE9BQUwsQ0FBYSxTQUFiLEdBQXlCLEdBQWhDO0FBQ0EsT0FKeUMsQ0FNMUM7OztBQUNBLFVBQUksT0FBTyxLQUFJLENBQUMsT0FBTCxDQUFhLFNBQXBCLEtBQWtDLFVBQXRDLEVBQWtEO0FBQ2pELGVBQU8sS0FBSSxDQUFDLE9BQUwsQ0FBYSxTQUFiLENBQXVCLEdBQXZCLENBQVA7QUFDQTs7QUFFRCxhQUFPLEdBQVA7QUFDQSxLQVpTOztBQTFCVCxRQUFJLE9BQU8sS0FBSyxTQUFoQixFQUEyQjtBQUMxQixXQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0E7QUFDRDs7QUFjTSxFQUFBLGNBQUEsQ0FBQSxTQUFBLENBQUEsbUJBQUEsR0FBUCxVQUEyQixJQUEzQixFQUFrRDtBQUNqRCxRQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTixDQUFjLElBQWQsSUFBc0IsSUFBSSxDQUFDLElBQUwsQ0FBVSxFQUFWLENBQXRCLEdBQXNDLElBQXhEO0FBQ0EsUUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLE1BQVYsR0FBbUIsS0FBSyxjQUFMLEVBQWpDO0FBQ0EsV0FBTyxLQUFLLEdBQUcsQ0FBUixHQUFZLEtBQVosR0FBb0IsQ0FBM0I7QUFDQSxHQUpNOztBQS9CZ0IsRUFBQSxjQUFBLENBQUEsY0FBQSxHQUF5QixtQkFBekI7O0FBRVQsRUFBQSxjQUFBLENBQUEsYUFBQSxHQUFnQixZQUFBO0FBQU0sV0FBQSxLQUFBO0FBQUssR0FBM0I7O0FBRUEsRUFBQSxjQUFBLENBQUEsbUJBQUEsR0FBc0IsWUFBQTtBQUFNLFdBQUEsS0FBQTtBQUFLLEdBQWpDOztBQUVBLEVBQUEsY0FBQSxDQUFBLHFCQUFBLEdBQXdCLFlBQUE7QUFBa0IsV0FBQSxFQUFBO0FBQUUsR0FBNUM7O0FBK0NmLFNBQUEsY0FBQTtBQUFDLENBeERELEVBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRUcmFuc2xhdG9ySW5zdGFuY2VNZW1iZXJzLFxuXHRsYW5nQ29kZSxcblx0bGFuZ0NvZGVXaXRoQXV0byxcbn0gZnJvbSAnLi4vdHlwZXMvVHJhbnNsYXRvcic7XG5cbmV4cG9ydCB0eXBlIENvcnNQcm94eSA9IHN0cmluZyB8ICgodXJsOiBzdHJpbmcpID0+IHN0cmluZyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsYXRvck9wdGlvbnMge1xuXHQvKipcblx0ICogQWNjZXNzIGtleSBmb3IgcmVxdWVzdHMgdG8gdHJhbnNsYXRvciBBUElcblx0ICovXG5cdGFwaUtleT86IHN0cmluZztcblxuXHQvKipcblx0ICogVW5pb24gdGV4dCBhcnJheSB0byAxIHJlcXVlc3QgKG9yIG1vcmUsIGJ1dCBsZXNzIHRoYW4gdXN1YWx5IGFueXdheSkuXG5cdCAqXG5cdCAqIE9wdGlvbiBmb3IgcmVkdWNlIHRoZSBudW1iZXIgb2YgcmVxdWVzdHMsIGJ1dCBpdCBjYW4gbWFrZSBhcnRlZmFjdHMgaW4gdHJhbnNsYXRlZCB0ZXh0LlxuXHQgKlxuXHQgKiBTb21lIG1vZHVsZXMgbWF5IG5vdCBzdXBwb3J0IHRoaXMgZmVhdHVyZS5cblx0ICovXG5cdHVzZU11bHRpcGxleGluZz86IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIEFkZGl0aW9uYWwgaGVhZGVycyBmb3IgcmVxdWVzdHNcblx0ICovXG5cdGhlYWRlcnM/OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xuXG5cdC8qKlxuXHQgKiBQcm94eSBwcmVmaXggb3IgdHJhbnNmb3JtIGZ1bmN0aW9uIHdoaWNoIHJldHVybiB1cmwgd2l0aCBDT1JTIHByb3h5XG5cdCAqXG5cdCAqIENPUlMgcHJveHkgdXNlZnVsIHRvIGF2b2lkIENPUlMgZXJyb3IgaW4gYnJvd3NlciBvciB0byBtYXNrIHNlcnZlciByZXF1ZXN0cyBhcyBicm93c2VyIHJlcXVlc3RzLlxuXHQgKlxuXHQgKiBBbGwgcmVxdWVzdHMgd2lsbCBzZW5kIHRocm91Z2ggdGhpcyBwcm94eSBzZXJ2ZXIgYW5kIHRoaXMgc2VydmVyIHdpbGwgbW9kaWZ5IGhlYWRlcnNcblx0ICovXG5cdGNvcnNQcm94eT86IENvcnNQcm94eTtcbn1cblxuLy8gVE9ETzogcmVtb3ZlIGl0IGFuZCBwcm92aWRlIHV0aWxzIHRvIGltcGxlbWVudCB0cmFuc2xhdG9yc1xuLyoqXG4gKiBCYXNpYyBhYnN0cmFjdCBjbGFzcyBmb3IgdHJhbnNsYXRvclxuICovXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlVHJhbnNsYXRvcjxDIGV4dGVuZHMgUmVjb3JkPGFueSwgYW55PiA9IHt9PlxuaW1wbGVtZW50cyBUcmFuc2xhdG9ySW5zdGFuY2VNZW1iZXJzXG57XG5cdHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgdHJhbnNsYXRvck5hbWU6IHN0cmluZyA9ICdVbmtub3duVHJhbnNsYXRvcic7XG5cblx0cHVibGljIHN0YXRpYyBpc1JlcXVpcmVkS2V5ID0gKCkgPT4gZmFsc2U7XG5cblx0cHVibGljIHN0YXRpYyBpc1N1cHBvcnRlZEF1dG9Gcm9tID0gKCkgPT4gZmFsc2U7XG5cblx0cHVibGljIHN0YXRpYyBnZXRTdXBwb3J0ZWRMYW5ndWFnZXMgPSAoKTogbGFuZ0NvZGVbXSA9PiBbXTtcblxuXHRwdWJsaWMgYWJzdHJhY3QgZ2V0TGVuZ3RoTGltaXQoKTogbnVtYmVyO1xuXG5cdHB1YmxpYyBhYnN0cmFjdCBnZXRSZXF1ZXN0c1RpbWVvdXQoKTogbnVtYmVyO1xuXG5cdHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zOiBUcmFuc2xhdG9yT3B0aW9ucyAmIEMgPSB7fSBhcyBhbnk7XG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBUcmFuc2xhdG9yT3B0aW9ucyAmIEMpIHtcblx0XHRpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdH1cblx0fVxuXG5cdGFic3RyYWN0IHRyYW5zbGF0ZShcblx0XHR0ZXh0OiBzdHJpbmcsXG5cdFx0bGFuZ0Zyb206IGxhbmdDb2RlV2l0aEF1dG8sXG5cdFx0bGFuZ1RvOiBsYW5nQ29kZSxcblx0KTogUHJvbWlzZTxzdHJpbmc+O1xuXG5cdGFic3RyYWN0IHRyYW5zbGF0ZUJhdGNoKFxuXHRcdHRleHQ6IHN0cmluZ1tdLFxuXHRcdGxhbmdGcm9tOiBsYW5nQ29kZVdpdGhBdXRvLFxuXHRcdGxhbmdUbzogbGFuZ0NvZGUsXG5cdCk6IFByb21pc2U8QXJyYXk8c3RyaW5nIHwgbnVsbD4+O1xuXG5cdHB1YmxpYyBjaGVja0xpbWl0RXhjZWVkaW5nKHRleHQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG5cdFx0Y29uc3QgcGxhaW5UZXh0ID0gQXJyYXkuaXNBcnJheSh0ZXh0KSA/IHRleHQuam9pbignJykgOiB0ZXh0O1xuXHRcdGNvbnN0IGV4dHJhID0gcGxhaW5UZXh0Lmxlbmd0aCAtIHRoaXMuZ2V0TGVuZ3RoTGltaXQoKTtcblx0XHRyZXR1cm4gZXh0cmEgPiAwID8gZXh0cmEgOiAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIFV0aWwgdG8gd3JhcCB1cmwgdG8gQ09SUyBwcm94eVxuXHQgKi9cblx0cHJvdGVjdGVkIHdyYXBVcmxUb0NvcnNQcm94eSA9ICh1cmw6IHN0cmluZykgPT4ge1xuXHRcdC8vIFVzZSBhcyBwcmVmaXhcblx0XHRpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5jb3JzUHJveHkgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmNvcnNQcm94eSArIHVybDtcblx0XHR9XG5cblx0XHQvLyBSdW4gdXNlciBkZWZpbmVkIHRyYW5zZm9ybWF0aW9uXG5cdFx0aWYgKHR5cGVvZiB0aGlzLm9wdGlvbnMuY29yc1Byb3h5ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmNvcnNQcm94eSh1cmwpO1xuXHRcdH1cblxuXHRcdHJldHVybiB1cmw7XG5cdH07XG59XG4iXSwiZmlsZSI6InV0aWwvQmFzZVRyYW5zbGF0b3IuanMifQ==
